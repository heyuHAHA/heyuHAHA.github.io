<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java类加载器</title>
      <link href="/2020/11/22/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2020/11/22/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="java-ClassLoader"><a href="#java-ClassLoader" class="headerlink" title="java ClassLoader"></a>java ClassLoader</h1><hr><p>想要解决的问题：</p><ol><li><strong>开发人员为什么要编写自定义的类加载器？</strong></li><li><strong>怎么使用类加载器去加载类？</strong></li><li><strong>Thread.currentThread().getClassLoader()和this.class.getClassLoader()分别在什么时候使用？区别是什么？</strong></li><li><strong>java类加载器的知识点</strong></li><li><strong>如何写一个类加载器</strong></li></ol><hr><h3 id="什么时候要编写自定义的类加载器"><a href="#什么时候要编写自定义的类加载器" class="headerlink" title="什么时候要编写自定义的类加载器"></a>什么时候要编写自定义的类加载器</h3><p>java的三个类加载器加载的目录都是指定好的，所以当我们需要加载一些自定义目录下的jar文件，运行时生成的字节数组，或者从远程服务器加载类这些时，会去编写自定义的类加载器。</p><h3 id="怎么使用类加载器去加载类"><a href="#怎么使用类加载器去加载类" class="headerlink" title="怎么使用类加载器去加载类"></a>怎么使用类加载器去加载类</h3><p>首先我们得了解类加载器的API:</p><pre><code>package java.lang;public abstract class ClassLoader {  public Class loadClass(String name);  protected Class defineClass(byte[] b);  public URL getResource(String name);  public Enumeration getResources(String name);  public ClassLoader getParent()}</code></pre><p>到目前为止，java.class.ClassLoader最重要的方法是loadClass方法,该方法获取要加载类的标准名称返回一个Class对象。defineClass方法是用来兑现为JVM的一个类的，byte[]数组可以是从磁盘读入或者网络读入的字节数组。getResource和getResources方法返回指定资源的URL对象。我们可以将loadClass和defineClass(getResource(name).getBytes())大似等同。</p><pre><code>public class A{    public void doSomething() {        B b = new B();    }}</code></pre><p>这里可以等同于 B b = A.class.getClassLoader().loadClass(“B”);每个类都与用于加载该类的类加载器有关联。实例化classLoader()时，可以指定父类加载器。如果未明确指定父类加载器，则会使用系统默认的父加载器。</p><h3 id="Thread-currentThread-getClassLoader-和this-class-getClassLoader-分别在什么时候使用？区别是什么？"><a href="#Thread-currentThread-getClassLoader-和this-class-getClassLoader-分别在什么时候使用？区别是什么？" class="headerlink" title="Thread.currentThread().getClassLoader()和this.class.getClassLoader()分别在什么时候使用？区别是什么？###"></a>Thread.currentThread().getClassLoader()和this.class.getClassLoader()分别在什么时候使用？区别是什么？###</h3><p>打个简单的比方，你一个WEB程序，发布到Tomcat里面运行。<br>首先是执行Tomcat org.apache.catalina.startup.Bootstrap类，这时候的类加载器是ClassLoader.getSystemClassLoader()。<br>而我们后面的WEB程序，里面的jar、resources都是由Tomcat内部来加载的，所以你在代码中动态加载jar、资源文件的时候，首先应该是使用Thread.currentThread().getContextClassLoader()。如果你使用Test.class.getClassLoader()，可能会导致和当前线程所运行的类加载器不一致（因为Java天生的多线程）。</p><h3 id="java类加载器的知识点"><a href="#java类加载器的知识点" class="headerlink" title="java类加载器的知识点"></a>java类加载器的知识点</h3><p>我觉得应该分为三个知识点。</p><p>1.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020的一些计划和感想</title>
      <link href="/2020/06/20/2020%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
      <url>/2020/06/20/2020%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>2020过去一大半了，希望下半年完成的一些书单：</p><ol><li>《java实战》：主要是想要了解java8,9,10的一些新特性,为我接下来要做的一个个人项目——DBFromZero,打好一些基础。</li><li>《深入分析JavaWeb技术内幕》：想对JavaWeb整个体系有一个清晰，逻辑性的认识。</li><li>《深入理解计算机系统》：读这本书算是比较晚了，也是想着为自己接下来的阅读计划打好基础，而且作为程序员，掌握好操作系统知识也是应该的。</li><li>《Designing Data-Intensive Applications》：这本书是知乎上一个大牛推荐的书，希望自己读的懂大概。</li><li>《A Philosophy of SoftWare Design》：同上</li></ol><p>可能还会读别的书，但以上这些书是我尤其想读的，我估计能读完上述的书籍也已经很好了，毕竟欲速则不达。ps:还计划每一到两个星期能读完一本“杂书”，“杂书”不用太厚，顶多两三百页的那种。相信积累的力量。</p><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>上半年比较困难，因为上一年做出了考研的选择，最终是没有考上，因此上半年一直在准备重新找工作的事情。考研给我的教训就是，考研是要有强大的目标能动性和行动力的，如果自己本身没那么想考，那多半是考不上的。</p><p>最后记录一下开通个人博客的初心吧：我自己本身是抱着写给自己看的心愿搭建该博客的，借用《写出我心》的前言里的一句话：人人都有想把自己的故事讲给别人听的愿望——或者在碌碌人生中，对我们所思，所感，所见，所闻的一种记录与觉悟。我觉得我是更偏向后者吧，对所思所感所见做记录与觉悟。对我来说，这其实是挺矛盾的，因为在我所见的各个编程大牛（来自知乎，技术书籍等）好像都不会这样“多愁善感”。所以我总有一种感觉就是：做这样的事我以后能变大牛吗（笑哭脸）。不过也可能是我想多了，寡闻了，印象刻板了，或许我根本不用理会，我只是在做自己想做的事，我坚持做，它会带我到需要去的地方的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
